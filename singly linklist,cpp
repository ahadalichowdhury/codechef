#include<bits/stdc++.h>
using namespace std;
 
struct node
{
	int data;
	struct node* next;
};
 
struct node* create(struct node* s, int data)
{
	struct node* temp;
	temp=(struct node*) malloc(sizeof(struct node));
 
	temp->data=data;
	temp->next=NULL;
	if(s==NULL)
	{
		s = temp;
		return temp;
	}
	else{
        struct node *root = s;
        while(s->next != NULL)
        {
            s = s->next;
        }
        s->next = temp;
        return root;
	}
 
}

struct node* in(struct node* s, int data)
{
	struct node* temp;
	temp=(struct node*)malloc (sizeof(struct node));
	
	temp->data=data;
	temp->next=s;
	s=temp;
	
	return temp;
	
}

struct node* end(struct node* s, int data)
{
	struct node* temp;
	temp=(struct node*) malloc(sizeof(struct node));
	
	temp->data=data;
	temp->next=NULL;
	if(s==NULL)
	{
		return temp;
	}
	node* current=s;
	while(current->next!=NULL)
	{
		current=current->next;
	}
	current->next=temp;
	
	return s;
}
 
void display(struct node* head)
{
	struct node* temp;
	temp=head;
	while(temp!=NULL)
	{
		cout<<temp->data << " " ;
		temp=temp->next;
	}
}

struct node* insertpos(struct node* s, int data, int pos)
{
	int i=1;
	struct node* ptr;
	ptr=(struct node*)malloc(sizeof(struct node));
	ptr->data=data;
	ptr->next=NULL;
	struct node* temp;
	temp=s;
	
	
	if(pos==1)
	{
		cout<<"this is empty";
	}
	
	while(i<pos)
	{
		temp=temp->next;
		i++;
	}
	ptr->next=temp->next;
	temp->next=ptr;
	
	return ptr;
}

struct node* deletef(struct node* s)
{
	struct node* temp;
	temp=s;
	s=s->next;
	free(temp);
	
	return s;
}

struct node* deleteend(struct node* s)
{
	struct node* temp;
	struct node* prev;
	temp=s;
	while(temp->next!=NULL)
	{
		prev=temp;
		temp=temp->next;
	}
	if(temp==s)
	s=NULL;
	
	else
	{
		prev->next=NULL;
	}
	free(temp);
	
	return s;
}
struct node* deletepos(struct node* s, int pos)
{
	if(pos==1)
	{
		deletef(s);
	}
	else
	{
		struct node* temp;
		temp=s;
		for(int i=1; i< pos-1; i++)
		{
			temp=temp->next;
		}
		struct node* temp1;
		temp1=temp->next;
		temp->next = temp1->next;
		free(temp1);
	}
	return s;
}

struct node* reverse(struct node* s)
{
	struct node* prev, * current, * nextnode;
	
	prev=NULL;
	current=nextnode=s;
	while(nextnode !=NULL)
	{
		nextnode=nextnode->next;
		current->next=prev;
		prev=current;
		current=nextnode;
	}
	s=prev;
	return s;
}

int main()
{
	struct node* head;
	head=(struct node*)malloc(sizeof(struct node));
	head=NULL;
 
	head=create(head, 50);
	head=create(head, 100);
	head=create(head, 500);
	
	head=in(head, 10);
	head=end(head, 500000);
	
	insertpos(head, 900, 2);
	
	
	
	head=deletef(head);
	head=deleteend(head);
	deletepos(head, 2);
	
	display(head);
	
	head=reverse(head);
	
	display(head);

}
